/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.autopilot.v1.assistant;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.MoreObjects;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import org.joda.time.DateTime;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Map;
import java.util.Objects;

/**
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class ExportAssistant extends Resource {
    private static final long serialVersionUID = 112608792494110L;

    public enum Status {
        COMPLETED("completed"),
        FAILED("failed");

        private final String value;

        private Status(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a Status from a string.
         * @param value string value
         * @return generated Status
         */
        @JsonCreator
        public static Status forValue(final String value) {
            return Promoter.enumFromString(value, Status.values());
        }
    }

    /**
     * Create a ExportAssistantFetcher to execute fetch.
     *
     * @param pathAssistantSid The SID of the Assistant to export.
     * @return ExportAssistantFetcher capable of executing the fetch
     */
    public static ExportAssistantFetcher fetcher(final String pathAssistantSid) {
        return new ExportAssistantFetcher(pathAssistantSid);
    }

    /**
     * Converts a JSON String into a ExportAssistant object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return ExportAssistant object represented by the provided JSON
     */
    public static ExportAssistant fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ExportAssistant.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a ExportAssistant object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return ExportAssistant object represented by the provided JSON
     */
    public static ExportAssistant fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ExportAssistant.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String accountSid;
    private final String assistantSid;
    private final DateTime dateCreated;
    private final ExportAssistant.Status status;
    private final Integer errorCode;
    private final URI url;
    private final Map<String, Object> schema;

    @JsonCreator
    private ExportAssistant(@JsonProperty("account_sid")
                            final String accountSid,
                            @JsonProperty("assistant_sid")
                            final String assistantSid,
                            @JsonProperty("date_created")
                            final String dateCreated,
                            @JsonProperty("status")
                            final ExportAssistant.Status status,
                            @JsonProperty("error_code")
                            final Integer errorCode,
                            @JsonProperty("url")
                            final URI url,
                            @JsonProperty("schema")
                            final Map<String, Object> schema) {
        this.accountSid = accountSid;
        this.assistantSid = assistantSid;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.status = status;
        this.errorCode = errorCode;
        this.url = url;
        this.schema = schema;
    }

    /**
     * Returns The SID of the Account that created the resource.
     *
     * @return The SID of the Account that created the resource
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns The SID of the Assistant to export..
     *
     * @return The SID of the Assistant to export.
     */
    public final String getAssistantSid() {
        return this.assistantSid;
    }

    /**
     * Returns The RFC 2822 date and time in GMT when the resource was created.
     *
     * @return The RFC 2822 date and time in GMT when the resource was created
     */
    public final DateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Returns The status of the export.
     *
     * @return The status of the export
     */
    public final ExportAssistant.Status getStatus() {
        return this.status;
    }

    /**
     * Returns More information about why the export failed, if `status` is
     * `failed`.
     *
     * @return More information about why the export failed, if `status` is `failed`
     */
    public final Integer getErrorCode() {
        return this.errorCode;
    }

    /**
     * Returns The absolute URL of the Export resource..
     *
     * @return The absolute URL of the Export resource.
     */
    public final URI getUrl() {
        return this.url;
    }

    /**
     * Returns The JSON string that describes the requested Assistant..
     *
     * @return The JSON string that describes the requested Assistant.
     */
    public final Map<String, Object> getSchema() {
        return this.schema;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ExportAssistant other = (ExportAssistant) o;

        return Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(assistantSid, other.assistantSid) &&
               Objects.equals(dateCreated, other.dateCreated) &&
               Objects.equals(status, other.status) &&
               Objects.equals(errorCode, other.errorCode) &&
               Objects.equals(url, other.url) &&
               Objects.equals(schema, other.schema);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountSid,
                            assistantSid,
                            dateCreated,
                            status,
                            errorCode,
                            url,
                            schema);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                          .add("accountSid", accountSid)
                          .add("assistantSid", assistantSid)
                          .add("dateCreated", dateCreated)
                          .add("status", status)
                          .add("errorCode", errorCode)
                          .add("url", url)
                          .add("schema", schema)
                          .toString();
    }
}